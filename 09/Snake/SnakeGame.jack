class SnakeGame {
    static int direction;  //current direction
    field Snake snake;
    field Square food;
    field BlockMap map;

    /** Constructs a new Square Game. */
    constructor SnakeGame new() {
        do Utils.srand(233);

        let direction = 1; // right
        let snake = Snake.new();
        let map = BlockMap.new();
        do createFood();

        return this;
    }

    /** Disposes this game. */
    method void dispose() {
        do snake.dispose();
        return;
    }

    /** Creates the food. */
    method void createFood() {
        var int position;
        let position = map.getAvailablePosition(Utils.random(map.getNum()));
        let food = Square.new(Utils.mod(position, 32), position / 32);
        return;
    }

    /** move the snake */
    method void moveSnake() {
        // nextX: [0, 31], nextY: [0, 15]
        var int position, nextX, nextY;

        let position = snake.getSnakeHeadPosition();
        let nextX = Utils.mod(position, 32);
        let nextY = position / 32;


        if (direction = 1) { // right
            let nextX = nextX + 1;
            if (nextX > 31) {
                let nextX = 0;
            }
        }
        if (direction = -1) { // left
            let nextX = nextX - 1;
            if (nextX < 0) {
                let nextX = 31;
            }
        }
        if (direction = -2) { // down
            let nextY = nextY + 1;
            if (nextY > 15) {
                let nextY = 0;
            }
        }
        if (direction = 2) { // up
            let nextY = nextY - 1;
            if (nextY < 0) {
                let nextY = 15;
            }
        }

        let position = snake.moveto(nextX, nextY);
        return;
    }

    /** Runs the game: handles the user's inputs and moves the square accordingly */
    method void run() {
        var int timer;
        var char key;  // the key currently pressed by the user
        var int d;
        var boolean exit;

        let timer = 0;
        let exit = false;
        let d = direction;

        while (~exit) {
            let key = Keyboard.keyPressed();

            if (key = 81)  { let exit = true; }             // q key
            if (key = 132) {                                // right arrow
                if (~(direction = -1)) {
                    let d = 1;
                }
            }
            if (key = 130) {                                // left arrow
                if (~(direction = 1)) {
                    let d = -1;
                }
            }
            if (key = 133) {                                // down arrow
                if (~(direction = 2)) {
                    let d = -2;
                }
            }
            if (key = 131) {                                // up arrow
                if (~(direction = -2)) {
                    let d = 2;
                }
            }

            if (timer > 60) {
                let direction = d;
                do moveSnake();
                let timer = 0;
            }

            do Sys.wait(5);     // delays the next movement
            let timer = timer + 1;
        }

        return;
    }
}
