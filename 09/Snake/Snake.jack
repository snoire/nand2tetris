class Snake {
    field Square head; // the head of the list, but the tail of the snake
    field Square tail;

    /* Creates a Snake. */
    constructor Snake new() {
        let head = Square.new(0, 0);
        let tail = head;

        do tail.setNext(Square.new(1, 0));
        let tail = tail.getNext();

        do tail.setNext(Square.new(2, 0));
        let tail = tail.getNext();

        return this;
    }

    /** Accessors. */
    method Square getSnakeHeadPosition() { return tail.getX() + (tail.getY() * 32); }

    /** Disposes this Snake. */
    method void dispose() {
        var Square tmp;

        while (~(head = null)) {
            let tmp = head.getNext();
            do head.dispose();
            let head = tmp;
        }

        do Memory.deAlloc(this);
        return;
    }

    /** Moving the snake, return the position of last square which is removed. */
    method int moveto(int nextX, int nextY) {
        var int position;
        var Square tbremoved;

        let tbremoved = head;
        let head = head.getNext();
        let position = tbremoved.getX() + (tbremoved.getY() * 32);
        do tbremoved.dispose();

        do tail.setNext(Square.new(nextX, nextY));
        let tail = tail.getNext();

        return position;
    }
}
